{"version":3,"sources":["Components/TabPanel/TabPanel.tsx","Components/InfoBox/InfoBox.tsx","utils/sortData.tsx","utils/printStats.tsx","Components/Table/Table.tsx","Components/Graph/Graph.tsx","Components/WorldMap/WorldMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","InfoBox","onClick","title","cases","total","active","handleChanges","a","Card","className","CardContent","Typography","sortData","data","sortedData","sort","b","printStats","stat","numeral","format","Table","countries","map","country","key","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","Graph","countryId","useState","setData","useEffect","queryId","fetch","then","response","json","timeline","fetchData","length","datasets","backgroundColor","borderColor","WorldMap","perMillion","console","log","countryCenter","setCountryCenter","countryZoom","setCountryZoom","forEach","item","name","newCenter","latitude","longitude","Map","style","height","width","zoom","center","TileLayer","url","CircleMarker","Math","cbrt","color","fillColor","Tooltip","direction","offset","opacity","recovered","deaths","App","setCountries","countryCode","setInputCountryCode","countryName","setInputCountryName","countryInfo","setCountryInfo","setCasesType","tableData","setTableData","tabValue","setTabValue","iso2","lat","long","casesPerOneMillion","recoveredPerOneMillion","deathsPerOneMillion","getCountriesData","onCountryChange","e","target","nativeEvent","innerText","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Tabs","event","newValue","aria-label","Tab","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59f81050.chunk.js","sourcesContent":["import React from 'react';\n// import Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nexport function TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <div>{children}</div>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport function a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}","import React from 'react';\nimport './InfoBox.css';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\ninterface infoBoxProps {\n    onClick: any,\n    title: string,\n    cases: string,\n    total: string, \n    active: boolean\n  }\n\nfunction InfoBox(props: infoBoxProps) {\n    const { onClick, title, cases, total, active} = props\n\n    const handleChanges = async () => {\n        await onClick()\n    }\n\n    return (\n        <Card \n            onClick = {handleChanges}\n            className={`infoBox ${active && \"infoBox--red\"}`}>\n            <CardContent>\n                <Typography>\n                    {title}\n                </Typography>\n                <h2>\n                    {cases} \n                </h2>\n                <Typography>\n                    {total} Total \n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default InfoBox\n","export const sortData = (data: any) => {\n    let sortedData = [...data];\n    sortedData.sort((a, b) => {\n      if (a.cases > b.cases) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    return sortedData;\n  };","import numeral from 'numeral';\n\nexport const printStats = (stat :any) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries }: { countries :any }) {\n    return (\n        <div className=\"table\">\n            <table>\n                <tbody>\n                    {countries.map((country: any) => (\n                        <tr key={country.country}>\n                            <td>\n                                {country.country}\n                            </td>\n                            <td>\n                                <b>{numeral(country.cases).format(\"0,0\")}</b>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport './Graph.css';\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem: any, data: any) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            callback: function (value:any, index:any, values:any) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\ntype GraphProps = { \n    casesType: string, \n    countryId: string \n}\n\ntype buildChartDataProps = {\n    data: any,\n    casesType: string\n}\n\nconst buildChartData = ({ data, casesType }: buildChartDataProps) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n\nconst Graph = ({ casesType, countryId } : GraphProps) => {\n    const [data, setData] = useState<any>({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n        let queryId: string = (countryId === 'worldwide') ? 'all' : countryId;\n        await fetch(`https://disease.sh/v3/covid-19/historical/${queryId}?lastdays=120`)\n            .then((response) => {\n              return response.json();\n            })\n            .then((data) => {\n                let chartData: any\n                if (queryId === 'all'){\n                    chartData = buildChartData({data, casesType});\n                }else{\n                    data = data.timeline\n                    chartData = buildChartData({data, casesType});\n                }\n                setData(chartData);\n            });\n    };\n\n    fetchData();\n  }, [countryId, casesType]);\n\n    return (\n        <div className=\"graph__container\">\n            {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n        </div>\n    )\n}\n\nexport default Graph","import React, { useState, useEffect } from 'react';\nimport { Map, CircleMarker, TileLayer, Tooltip } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\ninterface WorldMapProps {\n    data: any,\n    casesType: string,\n    country: string,\n    perMillion?: boolean\n  }\n\nfunction WorldMap(props: WorldMapProps) {\n    const { data, casesType, country, perMillion} = props\n    let type = 1\n    console.log(country)\n\n    if (perMillion){\n        type = 0\n    }\n    \n    const [countryCenter, setCountryCenter] = useState<any>([35,0]);\n    const [countryZoom, setCountryZoom] = useState<any>(2.3);\n\n\n    useEffect(() => {\n        console.log(\"useEffect Called\")\n        if(country === 'worldwide'){\n            let newCenter=[35, 0]\n            let newZoom = 2.3\n            setCountryCenter(newCenter)\n            setCountryZoom(newZoom)\n        } else{\n            data.forEach((item: any) => {\n                if (item.name === country){\n                    let newCenter=[item.latitude, item.longitude]\n                    let newZoom = 4\n                    setCountryCenter(newCenter)\n                    setCountryZoom(newZoom)\n                }\n            })\n        }\n    },[country, data])\n\n    return (\n        <div>\n            <Map\n                style={{ height: \"480px\", width: \"100%\" }}\n                zoom={countryZoom}\n                center={[countryCenter[0], countryCenter[1]]}>\n                <TileLayer url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                {data.map((country: any) => {\n                    return(\n                        <CircleMarker\n                            key={country.name + type}\n                            center={[country.latitude,country.longitude]}\n                            radius={Math.cbrt(country[casesType][type]/(type*50+1))}\n                            color='red'\n                            fillColor=\"red\">\n                            <Tooltip direction=\"right\" offset={[3, 0]} opacity={1}>\n                                <h4>{country.name}</h4>\n                                <p>{\"cases: \" + country.cases[type]}</p>\n                                <p>{\"recovered: \" + country.recovered[type]}</p>\n                                <p>{\"deaths: \" + country.deaths[type]}</p>\n                            </Tooltip>\n                            </CircleMarker>\n                    )\n                })}\n            </Map>\n        </div>\n    )\n}\n\nexport default WorldMap\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  Card,\n  CardContent,\n  FormControl, \n  Select,\n  MenuItem,\n  Tabs,\n  Tab\n} from '@material-ui/core';\nimport { TabPanel, a11yProps } from './Components/TabPanel/TabPanel';\nimport InfoBox from \"./Components/InfoBox/InfoBox\";\nimport { sortData } from \"./utils/sortData\";\nimport { printStats } from \"./utils/printStats\";\nimport numeral from 'numeral';\nimport Table from './Components/Table/Table';\nimport Graph from './Components/Graph/Graph';\nimport WorldMap from './Components/WorldMap/WorldMap';\n\nfunction App() {\n  const [countries, setCountries] = useState<Array<any>>([]);\n  const [countryCode, setInputCountryCode] = useState<any>(\"worldwide\");\n  const [countryName, setInputCountryName] = useState<any>(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState<any>({});\n  const [casesType, setCasesType] = useState<any>(\"cases\");\n  const [tableData, setTableData] = useState<any>([]);\n  const [tabValue, setTabValue] = useState<any>(0);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) =>{\n        const countries = data.map((country: any) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n            latitude: country.countryInfo.lat,\n            longitude: country.countryInfo.long,\n            cases: [country.casesPerOneMillion, country.cases],\n            recovered: [country.recoveredPerOneMillion, country.recovered],\n            deaths: [country.deathsPerOneMillion, country.deaths]\n          }\n        ))\n        let sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n      })\n    }\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e: any) => {\n    const countryCode = e.target.value;\n    console.log(e)\n    // const countryName = e.nativeEvent.originalTarget.innerText;\n    const countryName = e.nativeEvent.target.innerText;\n\n    const url =\n      (countryCode === \"worldwide\")\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountryCode(countryCode);\n        setInputCountryName(countryName);\n        setCountryInfo(data);\n      });\n  };\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19</h1>\n          <FormControl className = \"app__dropdown\">\n            <Select\n              variant =\"outlined\"\n              value={countryCode}\n              onChange={onCountryChange}\n              >\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem \n                    value={country.value} \n                    key={country.name}\n                    >{country.name}</MenuItem>\n                ))}\n              </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n              onClick = {(e: React.MouseEvent<HTMLElement>) => setCasesType(\"cases\")}\n              title=\"Coronavirus Cases\"\n              active={casesType === \"cases\"}\n              cases={printStats(countryInfo.todayCases)}\n              total={numeral(countryInfo.cases).format(\"0.0a\")}\n            />\n          <InfoBox\n              onClick={(e: React.MouseEvent<HTMLElement>) => setCasesType(\"recovered\")}\n              title=\"Recovered\"\n              active={casesType === \"recovered\"}\n              cases={printStats(countryInfo.todayRecovered)}\n              total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            />\n          <InfoBox\n              onClick={(e: React.MouseEvent<HTMLElement>) => setCasesType(\"deaths\")}\n              title=\"Deaths\"\n              active={casesType === \"deaths\"}\n              cases={printStats(countryInfo.todayDeaths)}\n              total={numeral(countryInfo.deaths).format(\"0.0a\")}\n            />\n          </div>\n          <Card>\n            <CardContent>\n              <h2 className=\"card__header\">{countryName} new {casesType}</h2>\n              {/* TODO: casestype recovered has no per capita */}\n              <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\">\n                <Tab label=\"Graph\" {...a11yProps(0)}/>\n                <Tab label=\"Map\" {...a11yProps(1)}/>\n                <Tab label=\"Map (per Million)\" {...a11yProps(2)}/>\n              </Tabs>\n              <TabPanel value={tabValue} index={0}>\n                <Graph casesType={casesType} countryId={countryCode}/>\n              </TabPanel>\n              <TabPanel value={tabValue} index={1}>\n                <WorldMap \n                  data = {countries} \n                  casesType = {casesType} \n                  country={countryName}/>\n              </TabPanel>\n              <TabPanel value={tabValue} index={2}>\n                <WorldMap \n                  data = {countries} \n                  casesType = {casesType} \n                  country={countryName}\n                  perMillion/>\n              </TabPanel>\n            </CardContent>\n          </Card>\n          {/* Map */}\n\n      </div>\n        {/* Table */}\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n            </div>\n          </CardContent>\n        </Card>\n        {/* Graph */}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <React.Fragment>\n     <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}